name: Build and deploy Sentinel for new customers
resources:
 pipelines:
   - pipeline: Scripts
     source: 'scriptsCI'
trigger:
 paths:
   include:
     - Onboard/*.json
stages:
- stage: get_new_onboarding_file
  displayName: 'Getting new customer onboarding file'
  pool:
    name: Azure Pipelines
    vmImage: 'windows-latest'
  jobs:
    - job:
      steps:
       - task: CopyFiles@2
         displayName: 'Copy new customer onboarding json'
         inputs:
          SourceFolder: '$(Pipeline.Workspace)/s/Onboard'
          Contents: '*.json'
          TargetFolder: '$(Pipeline.Workspace)/s/Deploy'
       - task: Files-Validator@1
         displayName: 'Validating JSON'
         inputs:
          rootDir: '$(Pipeline.Workspace)/s/Deploy/*.json'
          validateXML: false
          validateJSON: true
          validateYAML: false
          validatePS: false
       - task: PublishBuildArtifacts@1
         displayName: 'Publish Artifact: OnboardingFile'
         inputs:
          PathtoPublish: '$(Pipeline.Workspace)'
          Contents: '*.json'
          ArtifactName: OnboardingFile
- stage: customer_deployment
  displayName: 'Deploying to Customer environment'
  pool:
    name: Azure Pipelines
    vmImage: 'windows-latest'
  jobs:
    - job:
      steps:
        - download: current
          artifact: OnboardingFile
          patterns: '*.json'
    - job: A
      displayName: 'Job A'
      pool:
        vmImage: windows-latest
      steps:
      - task: Bash@3
        displayName: 'Get Json values and set output variables'
        name: setOutput
        inputs:
          targetType: inline
          script: |
            CustomerName=$(cat Customer3.json | jq -r 'CustomerName')
            HostingNumber=$(cat Customer3.json | jq -r 'HostingNumber')
            WorkspaceName=$(cat Customer3.json | jq -r 'WorkspaceName')
            ResourceGroupName=$(cat Customer3.json | jq -r 'ResourceGroupName')
            ResourceGroupLocation=$(cat Customer3.json | jq -r 'ResourceGroupLocation')
            ServiceConnectionName=$(cat Customer3.json | jq -r 'ServiceConnectionName')
            echo "##vso[task.setvariable variable=CustomerName;isoutput=true]$CustomerName"
            echo "##vso[task.setvariable variable=HostingNumber;isoutput=true]$HostingNumber"
            echo "##vso[task.setvariable variable=WorkspaceName;isoutput=true]$WorkspaceName"
            echo "##vso[task.setvariable variable=ResourceGroupName;isoutput=true]$ResourceGroupName"
            echo "##vso[task.setvariable variable=ResourceGroupLocation;isoutput=true]$ResourceGroupLocation"
            echo "##vso[task.setvariable variable=ServiceConnectionName;isoutput=true]$ServiceConnectionName"
    - job: B
      displayName: 'Job B'
      dependsOn: A
      variables:
        CustomerName: $[ dependencies.A.outputs['setOutput.CustomerName'] ]
        HostingNumber: $[ dependencies.A.outputs['setOutput.HostingNumber'] ]
        WorkspaceName: $[ dependencies.A.outputs['setOutput.WorkspaceName'] ]
        ResourceGroupName: $[ dependencies.A.outputs['setOutput.ResourceGroupName'] ]
        ResourceGroupLocation: $[ dependencies.A.outputs['setOutput.ResourceGroupLocation'] ]
        ServiceConnectionName: $[ dependencies.A.outputs['setOutput.ServiceConnectionName'] ]
      steps:
      - task: Bash@3
        displayName: 'Print variables'
        inputs:
          targetType: inline
          script: |
            echo "CustomerName = $(CustomerName)"
            echo "HostingNumber = $(HostingNumber)"
    - template: ../Pipelines/OnboardCustomer_old.yml
      parameters:
        CustomerName: $(CustomerName)
        HostingNumber: $(HostingNumber)
        WorkspaceName: $(WorkspaceName)
        ResourceGroupName: $(ResourceGroupName)
        ResourceGroupLocation: $(ResourceGroupLocation)
        ServiceConnectionName: $(ServiceConnectionName)
- stage: cleanup_onboarding_file
  displayName: 'Clean up onboarding files'
  pool:
    name: Azure Pipelines
    vmImage: 'windows-latest'
  jobs:
    - job: Cleanup
      steps:
       - checkout: self
         persistCredentials: true
         fetchDepth: 0
       - task: CopyFiles@2
         displayName: 'Copy new customer onboarding json to completed'
         inputs:
          SourceFolder: '$(Pipeline.Workspace)/s/Onboard'
          Contents: '*.json'
          TargetFolder: '$(Pipeline.Workspace)/s/Onboard/Completed'
       - task: Files-Validator@1
         displayName: 'Validating JSON'
         inputs:
           rootDir: '$(Pipeline.Workspace)/s/Onboard'
           validateXML: false
           validateJSON: true
           validateYAML: false
           validatePS: false
       - task: DeleteFiles@1
         displayName: 'Remove unneeded files'
         inputs:
          SourceFolder: '$(Pipeline.Workspace)/s/Onboard'
          Contents: '*.json'
       - script: |
          git config --global user.email "marcackermann860@gmail.com"
          git config --global user.name "marcackermann86"
          git checkout master
          git add --all
          git commit -m "Moving deployed customers"
          git push origin master
         workingDirectory: '$(Pipeline.Workspace)/s/Onboard/Completed'