name: Build and deploy Sentinel for new customers

resources:
 pipelines:
   - pipeline: Scripts
     source: 'scriptsCI'
     
trigger:
 paths:
   include:
     - Onboard/*.json
   exclude:
     - Onboard/Completed/*

pool:
  name: Azure Pipelines
  vmImage: 'windows-latest'

stages:
- stage: A
  displayName: 'Getting new customer onboarding file'
  jobs:
    - job: A1
      displayName: 'Copy, validate, publish'
      steps:
       - task: CopyFiles@2
         displayName: 'Copy new customer onboarding json'
         inputs:
          SourceFolder: '$(Pipeline.Workspace)/s/Onboard'
          Contents: '*.json'
          TargetFolder: '$(Pipeline.Workspace)/s/Deploy'
       - task: Files-Validator@1
         displayName: 'Validating JSON'
         inputs:
          rootDir: '$(Pipeline.Workspace)/s/Deploy/*.json'
          validateXML: false
          validateJSON: true
          validateYAML: false
          validatePS: false
       - task: PublishBuildArtifacts@1
         displayName: 'Publish Artifact: OnboardingFile'
         inputs:
          PathtoPublish: '$(Pipeline.Workspace)/s/Deploy'
          Contents: '*.json'
          ArtifactName: OnboardingFile
       - pwsh: |
            $variables = Get-Content $(Pipeline.Workspace)/s/Deploy/*.json | ConvertFrom-Json -AsHashtable
            $variables.GetEnumerator() | ForEach-Object {
              $name = $_.key
              $value = $_.value
              echo "##vso[task.setvariable variable=$name;isOutput=true]$value"
            }
         name: SetVars
         displayName: 'Parse JSON into variables'

- stage: B
  displayName: 'Deploying to Customer environment'
  dependsOn:
    - A
  variables:
    CustomerName: $[ stageDependencies.A.A1.outputs['SetVars.CustomerName'] ]
    HostingNumber: $[ stageDependencies.A.A1.outputs['SetVars.HostingNumber'] ]
    WorkspaceName: $[ stageDependencies.A.A1.outputs['SetVars.WorkspaceName'] ]
    ResourceGroupName: $[ stageDependencies.A.A1.outputs['SetVars.ResourceGroupName'] ]
    ResourceGroupLocation: $[ stageDependencies.A.A1.outputs['SetVars.ResourceGroupLocation'] ]
    ServiceConnectionName: $[ stageDependencies.A.A1.outputs['SetVars.ServiceConnectionName'] ]
  jobs:
  - deployment: '$(CustomerName)_Sentinel'
    displayName: DeploySentinelSolution
    pool:
      name: Azure Pipelines
      vmImage: 'windows-latest'
    environment: $(CustomerName)
    strategy:
      runOnce:
        preDeploy:
          steps:
            - checkout: self
            - task: PowerShell@2
              displayName: 'Prepare powershell environemnt'
              inputs:
                targetType: 'Inline'
                script: |
                  Install-Module AzSentinelTools -Scope CurrentUser -AllowClobber -Force
                  Import-Module AzSentinelTools
                pwsh: true
            - task: AzurePowerShell@4
              displayName: 'Deploy resource group for Sentinel workspace'
              inputs:
                azureSubscription: $(ServiceConnectionName)
                ScriptPath: '$(Pipeline.Workspace)/s/Scripts/DeployResourceGroup.ps1'
                ScriptArguments: '-Name $(ResourceGroupName) -Location $(ResourceGroupLocation) -Tag @{H="$(HostingNumber)"}'
                azurePowerShellVersion: LatestVersion
                pwsh: true
            - task: AzurePowerShell@4
              displayName: 'Deploy log analytics workspace for Sentinel'
              inputs:
                azureSubscription: $(ServiceConnectionName)
                ScriptPath: '$(Pipeline.Workspace)/s/Scripts/DeployLogAnalyticsWorkspace.ps1'
                ScriptArguments: '-Location $(ResourceGroupLocation) -Name $(WorkspaceName) -ResourceGroupName $(ResourceGroupName) -Tag @{H="$(HostingNumber)"}'
                azurePowerShellVersion: LatestVersion
                pwsh: true
        deploy:
          steps:
            - checkout: self
            - task: PowerShell@2
              displayName: 'Prepare environemnt'
              inputs:
                targetType: 'Inline'
                script: |
                  Install-Module AzSentinelTools -Scope CurrentUser -AllowClobber -Force
                  Import-Module AzSentinelTools
                pwsh: true
                
            - task: AzurePowerShell@4
              displayName: 'Enable and configure Azure Sentinel'
              inputs:
                azureSubscription: $(ServiceConnectionName)
                ScriptPath: '$(Pipeline.Workspace)/s/Scripts/EnableSentinel.ps1'
                ScriptArguments: '-Name $(WorkspaceName) -ResourceGroupName $(ResourceGroupName)'
                azurePowerShellVersion: LatestVersion
                pwsh: true

- stage: C
  displayName: 'Clean up onboarding files'
  dependsOn: 
    - A
    - B
  jobs:
    - job: C1
      displayName: 'Cleanup'
      steps:
       - checkout: self
         persistCredentials: true
         fetchDepth: 0
       - task: CopyFiles@2
         displayName: 'Copy new customer onboarding json to completed'
         inputs:
          SourceFolder: '$(Pipeline.Workspace)/s/Onboard'
          Contents: '*.json'
          TargetFolder: '$(Pipeline.Workspace)/s/Onboard/Completed'
       - task: Files-Validator@1
         displayName: 'Validating JSON'
         inputs:
           rootDir: '$(Pipeline.Workspace)/s/Onboard'
           validateXML: false
           validateJSON: true
           validateYAML: false
           validatePS: false
       - task: DeleteFiles@1
         displayName: 'Remove unneeded files'
         inputs:
          SourceFolder: '$(Pipeline.Workspace)/s/Onboard'
          Contents: '*.json'
       - script: |
          git config --global user.email "marcackermann860@gmail.com"
          git config --global user.name "marcackermann86"
          git checkout master
          git add --all
          git commit -m "Moving deployed customers"
          git push origin master
         workingDirectory: '$(Pipeline.Workspace)/s/Onboard/Completed'
